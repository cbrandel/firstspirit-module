/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
	id 'eclipse'
	id 'distribution'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}
dependencies {
	// api, implementation deps are packaged in the fsm and added to the <resources>
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:30.1.1-jre'

	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
	// compileOnly deps are not packaged and dnot added to the <resources>
    compileOnly 'commons-io:commons-io:2.11.0'
    
    // test stuff is also not packaged and dnot added to the <resources>
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'
    
}

// Do packaging for FirstSpirit Modules as .fsm
// https://docs.e-spirit.com/odfs/plug-developmen/implementation/module-architec/index.html
// some ideas from here  https://stackoverflow.com/questions/25398703/gradle-analogue-for-maven-assembly-plugin
import org.apache.tools.ant.filters.ReplaceTokens
// list of jars that are packaged
def jarlist = configurations.runtimeClasspath.collect{"${it.name}"}
// ready-made list of <resources> entries for the module.xml
def resourcesList = configurations.runtimeClasspath.collect{"<resource scope=\"server\">lib/${it.name}</resource>"}
distributions {
  main {
   	distributionBaseName = project.name
    contents {
      into('/lib/') {  // Copy the following jars to the /lib/ directory in the distribution archive
        from jar
        from configurations.runtimeClasspath
        dirMode = 0755
        fileMode = 0644
      }
      into('/META-INF/') {
	    from('src/main/fsm-resources') {
	    	expand(project.properties+[jarlist: jarlist, resourcesList: resourcesList])
	    }
	    dirMode = 0755
	    fileMode = 0644
	  }
    }
  }
}

distZip {
	extension = 'fsm'
}


// https://github.com/gradle/gradle/issues/3839#issuecomment-512805239
eclipse {
    classpath {
        defaultOutputDir = file('build') // this should be enough
        file {
            whenMerged { // but we still need to adjust the outputs for src paths
                cp -> cp.getEntries().forEach{
                    cpEntry -> if(cpEntry.kind=='src') {
                        cpEntry.output = cpEntry.output.replace('bin/', 'build/')
                    }
                }
            }
        }
    }
}
